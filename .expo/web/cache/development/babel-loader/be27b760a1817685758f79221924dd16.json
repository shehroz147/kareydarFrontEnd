{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _ from \"lodash\";\nimport React, { Children } from \"react\";\nimport extractLengthList from \"./extractLengthList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?[ptexm%])*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nvar fontFamilyPrefix = /^[\\s\"']*/;\nvar fontFamilySuffix = /[\\s\"']*$/;\nvar commaReg = /\\s*,\\s*/g;\nvar cachedFontObjectsFromString = {};\n\nfunction extractSingleFontFamily(fontFamilyString) {\n  return fontFamilyString ? fontFamilyString.split(commaReg)[0].replace(fontFamilyPrefix, \"\").replace(fontFamilySuffix, \"\") : null;\n}\n\nfunction parseFontString(font) {\n  if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n    return cachedFontObjectsFromString[font];\n  }\n\n  var match = fontRegExp.exec(font);\n\n  if (!match) {\n    return null;\n  }\n\n  var fontFamily = extractSingleFontFamily(match[3]);\n  var fontSize = match[2] || \"12\";\n  var isBold = /bold/.exec(match[1]);\n  var isItalic = /italic/.exec(match[1]);\n  var fontWeight = isBold ? \"bold\" : \"normal\";\n  var fontStyle = isItalic ? \"italic\" : \"normal\";\n  cachedFontObjectsFromString[font] = {\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n    fontStyle: fontStyle\n  };\n  return cachedFontObjectsFromString[font];\n}\n\nexport function extractFont(prop) {\n  var props = _objectSpread(_objectSpread({}, prop.style), prop);\n\n  var fontData = props.fontData,\n      fontStyle = props.fontStyle,\n      fontVariant = props.fontVariant,\n      fontWeight = props.fontWeight,\n      fontStretch = props.fontStretch,\n      textAnchor = props.textAnchor,\n      textDecoration = props.textDecoration,\n      letterSpacing = props.letterSpacing,\n      wordSpacing = props.wordSpacing,\n      kerning = props.kerning,\n      fontVariantLigatures = props.fontVariantLigatures,\n      fontFeatureSettings = props.fontFeatureSettings;\n  var fontSize = props.fontSize,\n      fontFamily = props.fontFamily,\n      font = props.font;\n  fontFamily = extractSingleFontFamily(fontFamily);\n  fontSize = fontSize ? \"\" + fontSize : null;\n\n  var ownedFont = _.pickBy({\n    fontData: fontData,\n    fontStyle: fontStyle,\n    fontVariant: fontVariant,\n    fontWeight: fontWeight,\n    fontStretch: fontStretch,\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    textAnchor: textAnchor,\n    textDecoration: textDecoration,\n    letterSpacing: letterSpacing,\n    wordSpacing: wordSpacing,\n    kerning: kerning,\n    fontVariantLigatures: fontVariantLigatures,\n    fontFeatureSettings: fontFeatureSettings\n  }, function (p) {\n    return !_.isNil(p);\n  });\n\n  if (typeof font === \"string\") {\n    font = parseFontString(font);\n  }\n\n  return _.defaults(ownedFont, font);\n}\nexport default function (props) {\n  var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var TSpan = arguments.length > 2 ? arguments[2] : undefined;\n  var x = props.x,\n      y = props.y,\n      dx = props.dx,\n      dy = props.dy,\n      rotate = props.rotate,\n      baselineShift = props.baselineShift,\n      verticalAlign = props.verticalAlign,\n      alignmentBaseline = props.alignmentBaseline;\n  var children = props.children;\n  var content = null;\n\n  if (typeof children === \"string\" || typeof children === \"number\") {\n    var childrenString = children.toString();\n\n    if (container) {\n      children = _jsx(TSpan, {\n        children: childrenString\n      });\n    } else {\n      content = childrenString;\n      children = null;\n    }\n  } else if (Children.count(children) > 1 || Array.isArray(children)) {\n    children = Children.map(children, function (child) {\n      if (typeof child === \"string\" || typeof child === \"number\") {\n        return _jsx(TSpan, {\n          children: child.toString()\n        });\n      } else {\n        return child;\n      }\n    });\n  }\n\n  return {\n    content: content,\n    children: children,\n    baselineShift: baselineShift,\n    verticalAlign: verticalAlign,\n    alignmentBaseline: alignmentBaseline,\n    font: extractFont(props),\n    x: extractLengthList(x),\n    y: extractLengthList(y),\n    dx: extractLengthList(dx),\n    dy: extractLengthList(dy),\n    rotate: extractLengthList(rotate)\n  };\n}","map":{"version":3,"names":["_","React","Children","extractLengthList","fontRegExp","fontFamilyPrefix","fontFamilySuffix","commaReg","cachedFontObjectsFromString","extractSingleFontFamily","fontFamilyString","split","replace","parseFontString","font","hasOwnProperty","match","exec","fontFamily","fontSize","isBold","isItalic","fontWeight","fontStyle","extractFont","prop","props","style","fontData","fontVariant","fontStretch","textAnchor","textDecoration","letterSpacing","wordSpacing","kerning","fontVariantLigatures","fontFeatureSettings","ownedFont","pickBy","p","isNil","defaults","container","TSpan","x","y","dx","dy","rotate","baselineShift","verticalAlign","alignmentBaseline","children","content","childrenString","toString","count","Array","isArray","map","child"],"sources":["C:/Users/hahah/Desktop/att/attornea-lawyer/node_modules/react-native-svg/lib/extract/extractText.js"],"sourcesContent":["import _ from \"lodash\";\n//noinspection JSUnresolvedVariable\nimport React, { Children } from \"react\";\nimport extractLengthList from \"./extractLengthList\";\n\nconst fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?[ptexm%])*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst commaReg = /\\s*,\\s*/g;\n\nconst cachedFontObjectsFromString = {};\n\nfunction extractSingleFontFamily(fontFamilyString) {\n    // SVG on the web allows for multiple font-families to be specified.\n    // For compatibility, we extract the first font-family, hoping\n    // we'll get a match.\n    return fontFamilyString\n        ? fontFamilyString\n              .split(commaReg)[0]\n              .replace(fontFamilyPrefix, \"\")\n              .replace(fontFamilySuffix, \"\")\n        : null;\n}\n\nfunction parseFontString(font) {\n    if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n        return cachedFontObjectsFromString[font];\n    }\n    const match = fontRegExp.exec(font);\n    if (!match) {\n        return null;\n    }\n    const fontFamily = extractSingleFontFamily(match[3]);\n    const fontSize = match[2] || \"12\";\n    const isBold = /bold/.exec(match[1]);\n    const isItalic = /italic/.exec(match[1]);\n    const fontWeight = isBold ? \"bold\" : \"normal\";\n    const fontStyle = isItalic ? \"italic\" : \"normal\";\n    cachedFontObjectsFromString[font] = {\n        fontSize,\n        fontFamily,\n        fontWeight,\n        fontStyle,\n    };\n    return cachedFontObjectsFromString[font];\n}\n\nexport function extractFont(prop) {\n    const props = { ...prop.style, ...prop };\n    const {\n        fontData,\n        fontStyle,\n        fontVariant,\n        fontWeight,\n        fontStretch,\n        textAnchor,\n        textDecoration,\n        letterSpacing,\n        wordSpacing,\n        kerning,\n        fontVariantLigatures,\n        fontFeatureSettings,\n    } = props;\n    let { fontSize, fontFamily, font } = props;\n\n    fontFamily = extractSingleFontFamily(fontFamily);\n    fontSize = fontSize ? \"\" + fontSize : null;\n\n    const ownedFont = _.pickBy(\n        {\n            fontData,\n            fontStyle,\n            fontVariant,\n            fontWeight,\n            fontStretch,\n            fontSize,\n            fontFamily,\n            textAnchor,\n            textDecoration,\n            letterSpacing,\n            wordSpacing,\n            kerning,\n            fontVariantLigatures,\n            fontFeatureSettings,\n        },\n        p => !_.isNil(p),\n    );\n\n    if (typeof font === \"string\") {\n        font = parseFontString(font);\n    }\n\n    return _.defaults(ownedFont, font);\n}\n\nexport default function(props, container = false, TSpan) {\n    const {\n        x,\n        y,\n        dx,\n        dy,\n        rotate,\n        baselineShift,\n        verticalAlign,\n        alignmentBaseline,\n    } = props;\n    let { children } = props;\n\n    let content = null;\n    if (typeof children === \"string\" || typeof children === \"number\") {\n        const childrenString = children.toString();\n        if (container) {\n            children = <TSpan>{childrenString}</TSpan>;\n        } else {\n            content = childrenString;\n            children = null;\n        }\n    } else if (Children.count(children) > 1 || Array.isArray(children)) {\n        children = Children.map(children, child => {\n            if (typeof child === \"string\" || typeof child === \"number\") {\n                return <TSpan>{child.toString()}</TSpan>;\n            } else {\n                return child;\n            }\n        });\n    }\n\n    return {\n        content,\n        children,\n        baselineShift,\n        verticalAlign,\n        alignmentBaseline,\n        font: extractFont(props),\n        x: extractLengthList(x),\n        y: extractLengthList(y),\n        dx: extractLengthList(dx),\n        dy: extractLengthList(dy),\n        rotate: extractLengthList(rotate),\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}