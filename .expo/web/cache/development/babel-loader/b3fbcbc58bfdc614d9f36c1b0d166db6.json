{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { TouchableOpacityBase } from \"react-native-web/dist/index\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useNavigation } from '@react-navigation/native';\nimport { fontPixel, heightPixel, pixelSizeHorizontal, pixelSizeVertical, widthPixel } from \"../../lib/style/adjust\";\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStyles } from \"../../lib/style/useStyle\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { defaultLogin } from \"../../Components/store/features/userSlice\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport AntDesign from \"@expo/vector-icons/AntDesign\";\nAntDesign.loadFont();\nimport { IconFill, IconOutline } from \"@ant-design/icons-react-native\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport server from \"../../server/server\";\nimport auth from \"../lib/api/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Login = function Login() {\n  var navigation = useNavigation();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userId = _useState2[0],\n      setUserId = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userInfo = _useState6[0],\n      setUserInfo = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      gettingLoginStatus = _useState8[0],\n      setGettingLoginStatus = _useState8[1];\n\n  useEffect(function () {}, []);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      error = _React$useState2[0],\n      setError = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      toggleCheckBox = _React$useState4[0],\n      setToggleCheckBox = _React$useState4[1];\n\n  var commonStyle = useStyles();\n  var authStatus;\n  var dispatch = useDispatch();\n\n  var _useForm = useForm({\n    defaultValues: {\n      email: '',\n      password: ''\n    },\n    mode: 'onBlur'\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit;\n\n  var onSubmit = function onSubmit(data) {\n    setError('');\n    console.log('***********', data);\n\n    var loginUser = function _callee() {\n      var response, user;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(auth.post('user/login', data));\n\n            case 2:\n              response = _context.sent;\n              console.log(response.data);\n              user = response.data.role;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"userId\", JSON.stringify(response.data._id)));\n\n            case 7:\n              if (user === 'Lawyer') {\n                navigation.navigate('LawyerHome');\n              } else {\n                alert('Invalid Email or Password');\n              }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    loginUser();\n  };\n\n  var getUserRole = function _callee2() {\n    var userRole, role1, role, role2;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('userRole'));\n\n          case 2:\n            userRole = _context2.sent;\n            role1 = JSON.parse(userRole);\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('role'));\n\n          case 6:\n            role = _context2.sent;\n            role2 = JSON.parse(role);\n\n            if (role1 === role2 && role1 === 'User') {\n              navigation.navigate('Home');\n            } else if (role1 === role2 && role1 === 'Lawyer') {\n              navigation.navigate(\"LawyerHome\");\n            }\n\n            alert('You cannot Login with a Different role');\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onErrors = function onErrors(err) {\n    console.log(err);\n\n    if (err.email) {\n      setError(err.email.message);\n      return;\n    }\n\n    if (err.password) {\n      setError(err.password.message);\n      return;\n    }\n  };\n\n  return _jsxs(View, {\n    style: {\n      alignItems: 'center',\n      padding: 20\n    },\n    children: [_jsx(Controller, {\n      control: control,\n      rules: {\n        required: 'Username is required!'\n      },\n      render: function render(_ref) {\n        var _ref$field = _ref.field,\n            onChange = _ref$field.onChange,\n            onBlur = _ref$field.onBlur,\n            value = _ref$field.value;\n        return _jsx(TextInput, {\n          style: commonStyle.input,\n          placeholderTextColor: '#AAAAAA',\n          autoCapitalize: \"none\",\n          autoCompleteType: \"email\",\n          autoCorrect: false,\n          keyboardType: \"email-address\",\n          onBlur: onBlur,\n          onChangeText: onChange,\n          returnKeyType: \"next\",\n          placeholder: \"Email\",\n          value: value\n        });\n      },\n      name: \"email\"\n    }), _jsx(Controller, {\n      control: control,\n      rules: {\n        required: 'Password is required!'\n      },\n      render: function render(_ref2) {\n        var _ref2$field = _ref2.field,\n            onChange = _ref2$field.onChange,\n            onBlur = _ref2$field.onBlur,\n            value = _ref2$field.value;\n        return _jsx(TextInput, {\n          style: commonStyle.input,\n          placeholderTextColor: '#AAAAAA',\n          autoCapitalize: \"none\",\n          autoCompleteType: \"password\",\n          autoCorrect: false,\n          onBlur: onBlur,\n          onChangeText: onChange,\n          returnKeyType: \"next\",\n          placeholder: \"Password\",\n          secureTextEntry: true,\n          onSubmitEditing: handleSubmit(onSubmit, onErrors),\n          value: value\n        });\n      },\n      name: \"password\"\n    }), _jsx(Text, {\n      style: {\n        textAlign: 'center',\n        color: 'red',\n        fontWeight: '500',\n        fontSize: fontPixel(14),\n        marginTop: pixelSizeVertical(16)\n      },\n      children: error\n    }), _jsx(View, {\n      style: {\n        flexDirection: 'row',\n        alignItems: 'center'\n      },\n      children: _jsx(Text, {\n        style: {\n          flex: 1,\n          color: '#222222',\n          fontWeight: '500',\n          fontSize: fontPixel(13),\n          letterSpacing: pixelSizeHorizontal(1)\n        },\n        children: \"Stay logged In\"\n      })\n    }), _jsx(Pressable, {\n      style: _objectSpread({\n        marginHorizontal: 20,\n        width: '100%',\n        height: heightPixel(63),\n        borderRadius: heightPixel(31),\n        marginTop: pixelSizeVertical(20)\n      }, Platform.select({\n        ios: {\n          shadowColor: 'rgba(0, 0, 0, 0.25)',\n          shadowOffset: {\n            width: 0,\n            height: 15\n          },\n          shadowOpacity: 0.6,\n          shadowRadius: 5\n        },\n        android: {\n          backgroundColor: '#EEEEEE',\n          elevation: 30\n        }\n      })),\n      onPress: handleSubmit(onSubmit, onErrors),\n      children: _jsx(LinearGradient, {\n        style: {\n          flex: 1,\n          width: '100%',\n          height: '100%',\n          borderRadius: heightPixel(31),\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        colors: ['#29406C', '#49494B'],\n        children: _jsx(Text, {\n          style: {\n            color: '#FFFFFF',\n            fontSize: fontPixel(20),\n            fontWeight: '500',\n            letterSpacing: 1\n          },\n          children: \"Login\"\n        })\n      })\n    })]\n  });\n};\n\nexport default Login;","map":{"version":3,"names":["React","useState","useEffect","Component","TouchableOpacityBase","useNavigation","fontPixel","heightPixel","pixelSizeHorizontal","pixelSizeVertical","widthPixel","useForm","Controller","useStyles","useDispatch","useSelector","defaultLogin","LinearGradient","AntDesign","loadFont","IconFill","IconOutline","NavigationContainer","AsyncStorage","server","auth","Login","navigation","userId","setUserId","loading","setLoading","userInfo","setUserInfo","gettingLoginStatus","setGettingLoginStatus","error","setError","toggleCheckBox","setToggleCheckBox","commonStyle","authStatus","dispatch","defaultValues","email","password","mode","control","handleSubmit","onSubmit","data","console","log","loginUser","post","response","user","role","setItem","JSON","stringify","_id","navigate","alert","getUserRole","getItem","userRole","role1","parse","role2","onErrors","err","message","alignItems","padding","required","field","onChange","onBlur","value","input","textAlign","color","fontWeight","fontSize","marginTop","flexDirection","flex","letterSpacing","marginHorizontal","width","height","borderRadius","Platform","select","ios","shadowColor","shadowOffset","shadowOpacity","shadowRadius","android","backgroundColor","elevation","justifyContent"],"sources":["C:/Users/hahah/Desktop/att/attornea-lawyer/src/Components/auth/Login.js"],"sourcesContent":["import React, { useState, useEffect, Component } from 'react';\r\nimport { Text, View, TextInput, Pressable, Platform, TouchableOpacityBase, TouchableOpacity, ActivityIndicator, Button } from 'react-native';\r\n// import CheckBox from '@react-native-community/checkbox';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nimport {\r\n    fontPixel,\r\n    heightPixel,\r\n    pixelSizeHorizontal,\r\n    pixelSizeVertical,\r\n    widthPixel,\r\n} from '../../lib/style/adjust';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { useStyles } from '../../lib/style/useStyle';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { defaultLogin } from '../../Components/store/features/userSlice';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport AntDesign from 'react-native-vector-icons/AntDesign';\r\nAntDesign.loadFont();\r\nimport { IconFill, IconOutline } from \"@ant-design/icons-react-native\";\r\n// import {\r\n//     GoogleSignin,\r\n//     GoogleSigninButton,\r\n//     statusCodes,\r\n// } from 'react-native-google-signin';\r\n\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport server from '../../server/server';\r\nimport auth from '../lib/api/auth';\r\nconst Login = () => {\r\n    const navigation = useNavigation();\r\n    const [userId, setUserId] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [userInfo, setUserInfo] = useState(null);\r\n    const [gettingLoginStatus, setGettingLoginStatus] = useState(true);\r\n    useEffect(() => {\r\n        // GoogleSignin.configure({\r\n        //     scopes: ['https://www.googleapis.com/auth/drive.readonly'],\r\n        //     webClientId: 'AIzaSyCyGKTv08DGfYhGXTZwdANZZWOXyI6ZRRM',\r\n        // });\r\n        // _isSignedIn();\r\n    }, []);\r\n\r\n    // const _isSignedIn = async () => {\r\n    //     const isSignedIn = await GoogleSignin.isSignedIn();\r\n    //     if (isSignedIn) {\r\n    //         alert('User is already signed in');\r\n    //         // Set User Info if user is already signed in\r\n    //         _getCurrentUserInfo();\r\n    //     } else {\r\n    //         console.log('Please Login');\r\n    //     }\r\n    //     setGettingLoginStatus(false);\r\n    // };\r\n\r\n    // const _getCurrentUserInfo = async () => {\r\n    //     try {\r\n    //         let info = await GoogleSignin.signInSilently();\r\n    //         console.log('User Info --> ', info);\r\n    //         setUserInfo(info);\r\n    //     } catch (error) {\r\n    //         if (error.code === statusCodes.SIGN_IN_REQUIRED) {\r\n    //             alert('User has not signed in yet');\r\n    //             console.log('User has not signed in yet');\r\n    //         } else {\r\n    //             alert(\"Something went wrong. Unable to get user's info\");\r\n    //             console.log(\"Something went wrong. Unable to get user's info\");\r\n    //         }\r\n    //     }\r\n    // };\r\n    // const _signIn = async () => {\r\n    //     // It will prompt google Signin Widget\r\n    //     try {\r\n    //         await GoogleSignin.hasPlayServices({\r\n    //             // Check if device has Google Play Services installed\r\n    //             // Always resolves to true on iOS\r\n    //             showPlayServicesUpdateDialog: true,\r\n    //         });\r\n    //         const userInfo = await GoogleSignin.signIn();\r\n    //         console.log('User Info --> ', userInfo);\r\n    //         setUserInfo(userInfo);\r\n    //     } catch (error) {\r\n    //         console.log('Message', JSON.stringify(error));\r\n    //         if (error.code === statusCodes.SIGN_IN_CANCELLED) {\r\n    //             alert('User Cancelled the Login Flow');\r\n    //         } else if (error.code === statusCodes.IN_PROGRESS) {\r\n    //             alert('Signing In');\r\n    //         } else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {\r\n    //             alert('Play Services Not Available or Outdated');\r\n    //         } else {\r\n    //             alert(error.message);\r\n    //         }\r\n    //     }\r\n    // };\r\n\r\n\r\n    // const _signOut = async () => {\r\n    //     setGettingLoginStatus(true);\r\n    //     // Remove user session from the device.\r\n    //     try {\r\n    //         await GoogleSignin.revokeAccess();\r\n    //         await GoogleSignin.signOut();\r\n    //         // Removing user Info\r\n    //         setUserInfo(null);\r\n    //     } catch (error) {\r\n    //         console.error(error);\r\n    //     }\r\n    //     setGettingLoginStatus(false);\r\n    // };\r\n\r\n\r\n\r\n    const [error, setError] = React.useState('');\r\n    const [toggleCheckBox, setToggleCheckBox] = React.useState(false);\r\n\r\n    const commonStyle = useStyles();\r\n    // const { authStatus } = useSelector(state => state.user);\r\n    let authStatus;\r\n    const dispatch = useDispatch();\r\n\r\n    // React.useEffect(() => {\r\n    //     if (authStatus === 'login_failed') {\r\n    //         setError('username or password is wrong');\r\n    //     }\r\n    // }, [authStatus, error]);\r\n\r\n    const { control, handleSubmit } = useForm({\r\n        defaultValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        mode: 'onBlur',\r\n    });\r\n    const onSubmit = data => {\r\n        setError('');\r\n        console.log('***********', data);\r\n        // const passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\r\n        // const emailRegex =\r\n        // /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n\r\n        // if (!emailRegex.test(data.email)) {\r\n        //     setError('Invalid email format');\r\n        //     return;\r\n        // }\r\n\r\n        // if (!passwordRegex.test(data.password)) {\r\n        //   setError(\r\n        //     'Password must contain 1 Capital,1 Number and Minimum 8 characters',\r\n        //   );\r\n        //   return;\r\n        // }\r\n        // dispatch(defaultLogin(data));\r\n        const loginUser = async () => {\r\n\r\n            const response = await auth.post('user/login', data);\r\n            console.log(response.data)\r\n            // await AsyncStorage.setItem(\"role\", JSON.stringify(response.data.role));\r\n            // let role = await AsyncStorage.getItem('userRole');\r\n            // role = JSON.stringify(role);\r\n            const user = response.data.role;\r\n            // console.log(user, role)\r\n            await AsyncStorage.setItem(\"userId\", JSON.stringify(response.data._id));\r\n            // const id = await AsyncStorage.getItem(\"userId\");\r\n            if (user === 'Lawyer') {\r\n                navigation.navigate('LawyerHome')\r\n            }\r\n            else {\r\n                alert('Invalid Email or Password');\r\n            }\r\n        }\r\n        loginUser();\r\n        // const checkRole = getUserRole();\r\n        // navigation.navigate('Home')\r\n\r\n\r\n    };\r\n\r\n    const getUserRole = async () => {\r\n\r\n        const userRole = await AsyncStorage.getItem('userRole');\r\n        let role1 = JSON.parse(userRole);\r\n        const role = await AsyncStorage.getItem('role');\r\n        // console.log(role);\r\n        let role2 = JSON.parse(role);\r\n        if ((role1 === role2) && (role1 === 'User')) {\r\n            navigation.navigate('Home')\r\n        }\r\n        else if ((role1 === role2) && (role1 === 'Lawyer')) {\r\n            navigation.navigate(\"LawyerHome\")\r\n        }\r\n        alert('You cannot Login with a Different role')\r\n    }\r\n\r\n    const onErrors = err => {\r\n        console.log(err);\r\n        if (err.email) {\r\n            setError(err.email.message);\r\n            return;\r\n        }\r\n        if (err.password) {\r\n            setError(err.password.message);\r\n            return;\r\n        }\r\n    };\r\n\r\n    return (\r\n        // <WebView\r\n        //     source={{\r\n        //         uri: 'https://attornea.com/mobile-signin'\r\n        //     }}\r\n        // />\r\n        <View style={{ alignItems: 'center', padding: 20 }}>\r\n            <Controller\r\n                control={control}\r\n                rules={{ required: 'Username is required!' }}\r\n                render={({ field: { onChange, onBlur, value } }) => (\r\n                    <TextInput\r\n                        style={commonStyle.input}\r\n                        placeholderTextColor={'#AAAAAA'}\r\n                        autoCapitalize=\"none\"\r\n                        autoCompleteType=\"email\"\r\n                        autoCorrect={false}\r\n                        keyboardType=\"email-address\"\r\n                        onBlur={onBlur}\r\n                        onChangeText={onChange}\r\n                        returnKeyType=\"next\"\r\n                        placeholder=\"Email\"\r\n                        value={value}\r\n                    />\r\n                )}\r\n                name=\"email\"\r\n            />\r\n            <Controller\r\n                control={control}\r\n                rules={{\r\n                    required: 'Password is required!',\r\n\r\n                }}\r\n                render={({ field: { onChange, onBlur, value } }) => (\r\n                    <TextInput\r\n                        style={commonStyle.input}\r\n                        placeholderTextColor={'#AAAAAA'}\r\n                        autoCapitalize=\"none\"\r\n                        autoCompleteType=\"password\"\r\n                        autoCorrect={false}\r\n                        onBlur={onBlur}\r\n                        onChangeText={onChange}\r\n                        returnKeyType=\"next\"\r\n                        placeholder=\"Password\"\r\n                        secureTextEntry\r\n                        onSubmitEditing={handleSubmit(onSubmit, onErrors)}\r\n                        value={value}\r\n                    />\r\n                )}\r\n                name=\"password\"\r\n            />\r\n            <Text\r\n                style={\r\n                    {\r\n                        textAlign: 'center',\r\n                        color: 'red',\r\n                        fontWeight: '500',\r\n                        fontSize: fontPixel(14),\r\n                        marginTop: pixelSizeVertical(16),\r\n                    }\r\n                }>\r\n                {error}\r\n            </Text>\r\n\r\n            <View\r\n                style={{\r\n                    flexDirection: 'row',\r\n                    alignItems: 'center',\r\n                }}>\r\n                {/* <CheckBox\r\n                    value={toggleCheckBox}\r\n                    tintColor={'gray'}\r\n                    onCheckColor={'#941DE1'}\r\n                    lineWidth={1}\r\n                    style={{\r\n                        width: widthPixel(25),\r\n                        height: widthPixel(25),\r\n                        marginHorizontal: pixelSizeHorizontal(10),\r\n                    }}\r\n                    onValueChange={newValue => setToggleCheckBox(newValue)}\r\n                /> */}\r\n                <Text\r\n                    style={\r\n                        {\r\n                            flex: 1,\r\n                            color: '#222222',\r\n                            fontWeight: '500',\r\n                            fontSize: fontPixel(13),\r\n                            letterSpacing: pixelSizeHorizontal(1),\r\n                        }\r\n                    }>\r\n                    Stay logged In\r\n                </Text>\r\n            </View>\r\n\r\n            <Pressable\r\n                style={{\r\n                    marginHorizontal: 20,\r\n                    width: '100%',\r\n                    height: heightPixel(63),\r\n                    borderRadius: heightPixel(31),\r\n                    marginTop: pixelSizeVertical(20),\r\n                    ...Platform.select({\r\n                        ios: {\r\n                            shadowColor: 'rgba(0, 0, 0, 0.25)',\r\n                            shadowOffset: {\r\n                                width: 0,\r\n                                height: 15,\r\n                            },\r\n                            shadowOpacity: 0.6,\r\n                            shadowRadius: 5,\r\n                        },\r\n                        android: {\r\n                            backgroundColor: '#EEEEEE',\r\n                            elevation: 30,\r\n                        },\r\n                    }),\r\n                }}\r\n                onPress={handleSubmit(onSubmit, onErrors)}>\r\n                <LinearGradient\r\n                    style={{\r\n                        flex: 1,\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        borderRadius: heightPixel(31),\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                    }}\r\n                    colors={['#29406C', '#49494B']}>\r\n\r\n                    <Text\r\n                        style={\r\n                            {\r\n                                color: '#FFFFFF',\r\n                                fontSize: fontPixel(20),\r\n                                fontWeight: '500',\r\n                                letterSpacing: 1,\r\n                            }\r\n                        }>\r\n                        Login\r\n                    </Text>\r\n                </LinearGradient>\r\n            </Pressable>\r\n            {/* <View style={{\r\n                justifyContent: 'space-evenly',\r\n                alignItems: 'center',\r\n                flexDirection: 'row',\r\n                width: '65%'\r\n            }}>\r\n                <TouchableOpacity>\r\n                    <IconFill name=\"facebook\"\r\n                        size={40}\r\n                        color={'#4267B2'} />\r\n                </TouchableOpacity>\r\n                <GoogleSigninButton\r\n                    style={{ width: 50, height: 48 }}\r\n                    size={GoogleSigninButton.Size.Wide}\r\n                    color={GoogleSigninButton.Color.Light}\r\n                    onPress={_signIn}\r\n                />\r\n\r\n\r\n\r\n            </View> */}\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}