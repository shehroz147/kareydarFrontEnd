{"ast":null,"code":"var meetOrSliceTypes = {\n  meet: 0,\n  slice: 1,\n  none: 2\n};\nvar alignEnum = [\"xMinYMin\", \"xMidYMin\", \"xMaxYMin\", \"xMinYMid\", \"xMidYMid\", \"xMaxYMid\", \"xMinYMax\", \"xMidYMax\", \"xMaxYMax\", \"none\"].reduce(function (prev, name) {\n  prev[name] = name;\n  return prev;\n}, {});\nvar spacesRegExp = /\\s+/;\nexport default function (props) {\n  var viewBox = props.viewBox,\n      preserveAspectRatio = props.preserveAspectRatio;\n\n  if (!viewBox) {\n    return null;\n  }\n\n  var params = viewBox.trim().split(spacesRegExp);\n\n  if (params.length === 4 && params.some(function (param) {\n    return isNaN(+param);\n  })) {\n    console.warn(\"Invalid `viewBox` prop:\" + viewBox);\n    return null;\n  }\n\n  var modes = preserveAspectRatio ? preserveAspectRatio.trim().split(spacesRegExp) : [];\n  var meetOrSlice = meetOrSliceTypes[modes[1]] || 0;\n  var align = alignEnum[modes[0]] || \"xMidYMid\";\n  return {\n    minX: +params[0],\n    minY: +params[1],\n    vbWidth: +params[2],\n    vbHeight: +params[3],\n    align: align,\n    meetOrSlice: meetOrSlice\n  };\n}\nexport { meetOrSliceTypes, alignEnum };","map":{"version":3,"names":["meetOrSliceTypes","meet","slice","none","alignEnum","reduce","prev","name","spacesRegExp","props","viewBox","preserveAspectRatio","params","trim","split","length","some","param","isNaN","console","warn","modes","meetOrSlice","align","minX","minY","vbWidth","vbHeight"],"sources":["C:/Users/hahah/Desktop/att/attornea-lawyer/node_modules/react-native-svg/lib/extract/extractViewBox.js"],"sourcesContent":["const meetOrSliceTypes = {\n    meet: 0,\n    slice: 1,\n    none: 2,\n};\n\nconst alignEnum = [\n    \"xMinYMin\",\n    \"xMidYMin\",\n    \"xMaxYMin\",\n    \"xMinYMid\",\n    \"xMidYMid\",\n    \"xMaxYMid\",\n    \"xMinYMax\",\n    \"xMidYMax\",\n    \"xMaxYMax\",\n    \"none\",\n].reduce((prev, name) => {\n    prev[name] = name;\n    return prev;\n}, {});\n\nconst spacesRegExp = /\\s+/;\n\nexport default function(props) {\n    const { viewBox, preserveAspectRatio } = props;\n\n    if (!viewBox) {\n        return null;\n    }\n\n    const params = viewBox.trim().split(spacesRegExp);\n\n    if (params.length === 4 && params.some(param => isNaN(+param))) {\n        console.warn(\"Invalid `viewBox` prop:\" + viewBox);\n        return null;\n    }\n\n    const modes = preserveAspectRatio\n        ? preserveAspectRatio.trim().split(spacesRegExp)\n        : [];\n\n    const meetOrSlice = meetOrSliceTypes[modes[1]] || 0;\n    const align = alignEnum[modes[0]] || \"xMidYMid\";\n\n    return {\n        minX: +params[0],\n        minY: +params[1],\n        vbWidth: +params[2],\n        vbHeight: +params[3],\n        align,\n        meetOrSlice,\n    };\n}\n\nexport { meetOrSliceTypes, alignEnum };\n"],"mappings":"AAAA,IAAMA,gBAAgB,GAAG;EACrBC,IAAI,EAAE,CADe;EAErBC,KAAK,EAAE,CAFc;EAGrBC,IAAI,EAAE;AAHe,CAAzB;AAMA,IAAMC,SAAS,GAAG,CACd,UADc,EAEd,UAFc,EAGd,UAHc,EAId,UAJc,EAKd,UALc,EAMd,UANc,EAOd,UAPc,EAQd,UARc,EASd,UATc,EAUd,MAVc,EAWhBC,MAXgB,CAWT,UAACC,IAAD,EAAOC,IAAP,EAAgB;EACrBD,IAAI,CAACC,IAAD,CAAJ,GAAaA,IAAb;EACA,OAAOD,IAAP;AACH,CAdiB,EAcf,EAde,CAAlB;AAgBA,IAAME,YAAY,GAAG,KAArB;AAEA,eAAe,UAASC,KAAT,EAAgB;EAC3B,IAAQC,OAAR,GAAyCD,KAAzC,CAAQC,OAAR;EAAA,IAAiBC,mBAAjB,GAAyCF,KAAzC,CAAiBE,mBAAjB;;EAEA,IAAI,CAACD,OAAL,EAAc;IACV,OAAO,IAAP;EACH;;EAED,IAAME,MAAM,GAAGF,OAAO,CAACG,IAAR,GAAeC,KAAf,CAAqBN,YAArB,CAAf;;EAEA,IAAII,MAAM,CAACG,MAAP,KAAkB,CAAlB,IAAuBH,MAAM,CAACI,IAAP,CAAY,UAAAC,KAAK;IAAA,OAAIC,KAAK,CAAC,CAACD,KAAF,CAAT;EAAA,CAAjB,CAA3B,EAAgE;IAC5DE,OAAO,CAACC,IAAR,CAAa,4BAA4BV,OAAzC;IACA,OAAO,IAAP;EACH;;EAED,IAAMW,KAAK,GAAGV,mBAAmB,GAC3BA,mBAAmB,CAACE,IAApB,GAA2BC,KAA3B,CAAiCN,YAAjC,CAD2B,GAE3B,EAFN;EAIA,IAAMc,WAAW,GAAGtB,gBAAgB,CAACqB,KAAK,CAAC,CAAD,CAAN,CAAhB,IAA8B,CAAlD;EACA,IAAME,KAAK,GAAGnB,SAAS,CAACiB,KAAK,CAAC,CAAD,CAAN,CAAT,IAAuB,UAArC;EAEA,OAAO;IACHG,IAAI,EAAE,CAACZ,MAAM,CAAC,CAAD,CADV;IAEHa,IAAI,EAAE,CAACb,MAAM,CAAC,CAAD,CAFV;IAGHc,OAAO,EAAE,CAACd,MAAM,CAAC,CAAD,CAHb;IAIHe,QAAQ,EAAE,CAACf,MAAM,CAAC,CAAD,CAJd;IAKHW,KAAK,EAALA,KALG;IAMHD,WAAW,EAAXA;EANG,CAAP;AAQH;AAED,SAAStB,gBAAT,EAA2BI,SAA3B"},"metadata":{},"sourceType":"module"}