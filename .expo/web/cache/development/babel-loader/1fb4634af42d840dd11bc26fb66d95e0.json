{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nvar DEG_TO_RAD = Math.PI / 180;\n\nvar Matrix2D = _createClass(function Matrix2D(_a, _b, _c, _d, _tx, _ty) {\n  _classCallCheck(this, Matrix2D);\n\n  this.setTransform = function (a, b, c, d, tx, ty) {\n    this.a = a === null || a === undefined ? 1 : a;\n    this.b = b || 0;\n    this.c = c || 0;\n    this.d = d === null || d === undefined ? 1 : d;\n    this.tx = tx || 0;\n    this.ty = ty || 0;\n    return this;\n  };\n\n  this.reset = function () {\n    this.a = this.d = 1;\n    this.b = this.c = this.tx = this.ty = 0;\n    return this;\n  };\n\n  this.toArray = function () {\n    return [this.a, this.b, this.c, this.d, this.tx, this.ty];\n  };\n\n  this.copy = function (matrix) {\n    return this.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n  };\n\n  this.clone = function () {\n    return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n  };\n\n  this.prepend = function (a, b, c, d, tx, ty) {\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n    this.a = a * a1 + c * this.b;\n    this.b = b * a1 + d * this.b;\n    this.c = a * c1 + c * this.d;\n    this.d = b * c1 + d * this.d;\n    this.tx = a * tx1 + c * this.ty + tx;\n    this.ty = b * tx1 + d * this.ty + ty;\n    return this;\n  };\n\n  this.append = function (a, b, c, d, tx, ty) {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n\n    if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {\n      this.a = a1 * a + c1 * b;\n      this.b = b1 * a + d1 * b;\n      this.c = a1 * c + c1 * d;\n      this.d = b1 * c + d1 * d;\n    }\n\n    this.tx = a1 * tx + c1 * ty + this.tx;\n    this.ty = b1 * tx + d1 * ty + this.ty;\n    return this;\n  };\n\n  this.appendTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    var cos, sin;\n\n    if (rotation % 360) {\n      var r = rotation * DEG_TO_RAD;\n      cos = Math.cos(r);\n      sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n\n    if (skewX || skewY) {\n      skewX *= DEG_TO_RAD;\n      skewY *= DEG_TO_RAD;\n      this.append(Math.cos(skewY), Math.sin(skewY), Math.sin(skewX), Math.cos(skewX), x, y);\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n    } else {\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n    }\n\n    if (regX || regY) {\n      this.tx -= regX * this.a + regY * this.c;\n      this.ty -= regX * this.b + regY * this.d;\n    }\n\n    return this;\n  };\n\n  this.prependTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    var cos, sin;\n\n    if (rotation % 360) {\n      var r = rotation * DEG_TO_RAD;\n      cos = Math.cos(r);\n      sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n\n    if (regX || regY) {\n      this.tx -= regX;\n      this.ty -= regY;\n    }\n\n    if (skewX || skewY) {\n      skewX *= DEG_TO_RAD;\n      skewY *= DEG_TO_RAD;\n      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n      this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n    } else {\n      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n    }\n\n    return this;\n  };\n\n  this.setTransform(_a, _b, _c, _d, _tx, _ty);\n});\n\nexport { Matrix2D as default };","map":{"version":3,"names":["DEG_TO_RAD","Math","PI","Matrix2D","a","b","c","d","tx","ty","setTransform","undefined","reset","toArray","copy","matrix","clone","prepend","a1","c1","tx1","append","b1","d1","appendTransform","x","y","scaleX","scaleY","rotation","skewX","skewY","regX","regY","cos","sin","r","prependTransform"],"sources":["C:/Users/hahah/Desktop/att/attornea-lawyer/node_modules/react-native-svg/lib/Matrix2D.js"],"sourcesContent":["/**\n * based on\n * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\n */\nconst DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n *\n * This matrix can be visualized as:\n *\n * \t[ a  c  tx\n * \t  b  d  ty\n * \t  0  0  1  ]\n *\n * Note the locations of b and c.\n *\n * @class Matrix2D\n * @param {Number} [a=1] Specifies the a property for the new matrix.\n * @param {Number} [b=0] Specifies the b property for the new matrix.\n * @param {Number} [c=0] Specifies the c property for the new matrix.\n * @param {Number} [d=1] Specifies the d property for the new matrix.\n * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n * @constructor\n **/\nexport default class Matrix2D {\n    constructor(a, b, c, d, tx, ty) {\n        this.setTransform(a, b, c, d, tx, ty);\n\n        // public properties:\n        // assigned in the setValues method.\n        /**\n         * Position (0, 0) in a 3x3 affine transformation matrix.\n         * @property a\n         * @type Number\n         **/\n\n        /**\n         * Position (0, 1) in a 3x3 affine transformation matrix.\n         * @property b\n         * @type Number\n         **/\n\n        /**\n         * Position (1, 0) in a 3x3 affine transformation matrix.\n         * @property c\n         * @type Number\n         **/\n\n        /**\n         * Position (1, 1) in a 3x3 affine transformation matrix.\n         * @property d\n         * @type Number\n         **/\n\n        /**\n         * Position (2, 0) in a 3x3 affine transformation matrix.\n         * @property tx\n         * @type Number\n         **/\n\n        /**\n         * Position (2, 1) in a 3x3 affine transformation matrix.\n         * @property ty\n         * @type Number\n         **/\n    }\n\n    /**\n     * Set current matrix to new absolute matrix.\n     * @method setTransform\n     * @param {Number} [a=1] Specifies the a property for the new matrix.\n     * @param {Number} [b=0] Specifies the b property for the new matrix.\n     * @param {Number} [c=0] Specifies the c property for the new matrix.\n     * @param {Number} [d=1] Specifies the d property for the new matrix.\n     * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n     * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n     * @return {Matrix2D} This instance. Useful for chaining method calls.\n     */\n    setTransform = function(a, b, c, d, tx, ty) {\n        this.a = a === null || a === undefined ? 1 : a;\n        this.b = b || 0;\n        this.c = c || 0;\n        this.d = d === null || d === undefined ? 1 : d;\n        this.tx = tx || 0;\n        this.ty = ty || 0;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Reset current matrix to an identity matrix.\n     * @method reset\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    reset = function() {\n        this.a = this.d = 1;\n        this.b = this.c = this.tx = this.ty = 0;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Returns an array with current matrix values.\n     * @method toArray\n     * @return {Array} an array with current matrix values.\n     **/\n    toArray = function() {\n        return [this.a, this.b, this.c, this.d, this.tx, this.ty];\n    };\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Copies all properties from the specified matrix to this matrix.\n     * @method copy\n     * @param {Matrix2D} matrix The matrix to copy properties from.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     */\n    copy = function(matrix) {\n        //noinspection JSUnresolvedVariable\n        return this.setTransform(\n            matrix.a,\n            matrix.b,\n            matrix.c,\n            matrix.d,\n            matrix.tx,\n            matrix.ty\n        );\n    };\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Clones current instance and returning a new matrix.\n     * @method clone\n     * @return {Matrix2D} a clone of the Matrix2D instance.\n     **/\n    clone = function() {\n        return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n    };\n\n    /**\n     * Prepends the specified matrix properties to this matrix.\n     * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n     * All parameters are required.\n     * @method prepend\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} tx\n     * @param {Number} ty\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    prepend = function(a, b, c, d, tx, ty) {\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = a * a1 + c * this.b;\n        this.b = b * a1 + d * this.b;\n        this.c = a * c1 + c * this.d;\n        this.d = b * c1 + d * this.d;\n        this.tx = a * tx1 + c * this.ty + tx;\n        this.ty = b * tx1 + d * this.ty + ty;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Appends the specified matrix properties to this matrix. All parameters are required.\n     * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n     * @method append\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} tx\n     * @param {Number} ty\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    append = function(a, b, c, d, tx, ty) {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {\n            this.a = a1 * a + c1 * b;\n            this.b = b1 * a + d1 * b;\n            this.c = a1 * c + c1 * d;\n            this.d = b1 * c + d1 * d;\n        }\n        this.tx = a1 * tx + c1 * ty + this.tx;\n        this.ty = b1 * tx + d1 * ty + this.ty;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n     * For example, you can use this to generate a matrix representing the transformations of a display object:\n     *\n     * \tvar mtx = new createjs.Matrix2D();\n     * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n     * @method appendTransform\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     * @param {Number} rotation\n     * @param {Number} skewX\n     * @param {Number} skewY\n     * @param {Number} regX Optional.\n     * @param {Number} regY Optional.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    appendTransform = function(\n        x,\n        y,\n        scaleX,\n        scaleY,\n        rotation,\n        skewX,\n        skewY,\n        regX,\n        regY\n    ) {\n        let cos, sin;\n        if (rotation % 360) {\n            const r = rotation * DEG_TO_RAD;\n            cos = Math.cos(r);\n            sin = Math.sin(r);\n        } else {\n            cos = 1;\n            sin = 0;\n        }\n\n        if (skewX || skewY) {\n            // TODO: can this be combined into a single append operation?\n            skewX *= DEG_TO_RAD;\n            skewY *= DEG_TO_RAD;\n            this.append(\n                Math.cos(skewY),\n                Math.sin(skewY),\n                Math.sin(skewX),\n                Math.cos(skewX),\n                x,\n                y\n            );\n            this.append(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                0,\n                0\n            );\n        } else {\n            this.append(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                x,\n                y\n            );\n        }\n\n        if (regX || regY) {\n            // append the registration offset:\n            this.tx -= regX * this.a + regY * this.c;\n            this.ty -= regX * this.b + regY * this.d;\n        }\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\n     * For example, you could calculate the combined transformation for a child object using:\n     *\n     * \tvar o = myDisplayObject;\n     * \tvar mtx = new createjs.Matrix2D();\n     * \tdo  {\n     * \t\t// prepend each parent's transformation in turn:\n     * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n     * \t} while (o = o.parent);\n     *\n     * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n     * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\n     * @method prependTransform\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     * @param {Number} rotation\n     * @param {Number} skewX\n     * @param {Number} skewY\n     * @param {Number} regX Optional.\n     * @param {Number} regY Optional.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    prependTransform = function(\n        x,\n        y,\n        scaleX,\n        scaleY,\n        rotation,\n        skewX,\n        skewY,\n        regX,\n        regY\n    ) {\n        let cos, sin;\n        if (rotation % 360) {\n            const r = rotation * DEG_TO_RAD;\n            cos = Math.cos(r);\n            sin = Math.sin(r);\n        } else {\n            cos = 1;\n            sin = 0;\n        }\n\n        if (regX || regY) {\n            // prepend the registration offset:\n            this.tx -= regX;\n            this.ty -= regY;\n        }\n        if (skewX || skewY) {\n            // TODO: can this be combined into a single prepend operation?\n            skewX *= DEG_TO_RAD;\n            skewY *= DEG_TO_RAD;\n            this.prepend(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                0,\n                0\n            );\n            this.prepend(\n                Math.cos(skewY),\n                Math.sin(skewY),\n                -Math.sin(skewX),\n                Math.cos(skewX),\n                x,\n                y\n            );\n        } else {\n            this.prepend(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                x,\n                y\n            );\n        }\n        //noinspection JSValidateTypes\n        return this;\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}