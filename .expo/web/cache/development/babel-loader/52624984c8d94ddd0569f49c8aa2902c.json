{"ast":null,"code":"import extractBrush from \"./extractBrush\";\nimport extractOpacity from \"./extractOpacity\";\nimport { strokeProps } from \"../props\";\nimport extractLengthList from \"./extractLengthList\";\nvar caps = {\n  butt: 0,\n  square: 2,\n  round: 1\n};\nvar joins = {\n  miter: 0,\n  bevel: 2,\n  round: 1\n};\nvar strokeKeys = Object.keys(strokeProps);\nexport default function (props, styleProperties) {\n  strokeKeys.forEach(function (name) {\n    if (props.hasOwnProperty(name)) {\n      styleProperties.push(name);\n    }\n  });\n  var stroke = props.stroke;\n  var strokeWidth = props.strokeWidth,\n      strokeDasharray = props.strokeDasharray;\n\n  if (!strokeDasharray || strokeDasharray === \"none\") {\n    strokeDasharray = null;\n  } else {\n    strokeDasharray = extractLengthList(strokeDasharray);\n\n    if (strokeDasharray && strokeDasharray.length % 2 === 1) {\n      strokeDasharray = strokeDasharray.concat(strokeDasharray);\n    }\n  }\n\n  if (!strokeWidth || typeof strokeWidth !== \"string\") {\n    strokeWidth = \"\" + (strokeWidth || 1);\n  }\n\n  return {\n    stroke: extractBrush(stroke),\n    strokeOpacity: extractOpacity(props.strokeOpacity),\n    strokeLinecap: caps[props.strokeLinecap] || 0,\n    strokeLinejoin: joins[props.strokeLinejoin] || 0,\n    strokeDasharray: strokeDasharray,\n    strokeWidth: strokeWidth,\n    strokeDashoffset: strokeDasharray ? +props.strokeDashoffset || 0 : null,\n    strokeMiterlimit: parseFloat(props.strokeMiterlimit) || 4\n  };\n}","map":{"version":3,"names":["extractBrush","extractOpacity","strokeProps","extractLengthList","caps","butt","square","round","joins","miter","bevel","strokeKeys","Object","keys","props","styleProperties","forEach","name","hasOwnProperty","push","stroke","strokeWidth","strokeDasharray","length","concat","strokeOpacity","strokeLinecap","strokeLinejoin","strokeDashoffset","strokeMiterlimit","parseFloat"],"sources":["C:/Users/hahah/Desktop/att/attornea-lawyer/node_modules/react-native-svg/lib/extract/extractStroke.js"],"sourcesContent":["import extractBrush from \"./extractBrush\";\nimport extractOpacity from \"./extractOpacity\";\nimport { strokeProps } from \"../props\";\nimport extractLengthList from \"./extractLengthList\";\n\nconst caps = {\n    butt: 0,\n    square: 2,\n    round: 1,\n};\n\nconst joins = {\n    miter: 0,\n    bevel: 2,\n    round: 1,\n};\n\nconst strokeKeys = Object.keys(strokeProps);\n\nexport default function(props, styleProperties) {\n    strokeKeys.forEach(name => {\n        if (props.hasOwnProperty(name)) {\n            styleProperties.push(name);\n        }\n    });\n\n    const { stroke } = props;\n    let { strokeWidth, strokeDasharray } = props;\n\n    if (!strokeDasharray || strokeDasharray === \"none\") {\n        strokeDasharray = null;\n    } else {\n        // <dasharray> It's a list of comma and/or white space separated <length>s\n        // and <percentage>s that specify the lengths of alternating dashes and gaps.\n        // If an odd number of values is provided, then the list of values is repeated\n        // to yield an even number of values. Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.\n        strokeDasharray = extractLengthList(strokeDasharray);\n        if (strokeDasharray && strokeDasharray.length % 2 === 1) {\n            strokeDasharray = strokeDasharray.concat(strokeDasharray);\n        }\n    }\n\n    if (!strokeWidth || typeof strokeWidth !== \"string\") {\n        strokeWidth = `${strokeWidth || 1}`;\n    }\n\n    return {\n        stroke: extractBrush(stroke),\n        strokeOpacity: extractOpacity(props.strokeOpacity),\n        strokeLinecap: caps[props.strokeLinecap] || 0,\n        strokeLinejoin: joins[props.strokeLinejoin] || 0,\n        strokeDasharray: strokeDasharray,\n        strokeWidth: strokeWidth,\n        strokeDashoffset: strokeDasharray ? +props.strokeDashoffset || 0 : null,\n        strokeMiterlimit: parseFloat(props.strokeMiterlimit) || 4,\n    };\n}\n"],"mappings":"AAAA,OAAOA,YAAP;AACA,OAAOC,cAAP;AACA,SAASC,WAAT;AACA,OAAOC,iBAAP;AAEA,IAAMC,IAAI,GAAG;EACTC,IAAI,EAAE,CADG;EAETC,MAAM,EAAE,CAFC;EAGTC,KAAK,EAAE;AAHE,CAAb;AAMA,IAAMC,KAAK,GAAG;EACVC,KAAK,EAAE,CADG;EAEVC,KAAK,EAAE,CAFG;EAGVH,KAAK,EAAE;AAHG,CAAd;AAMA,IAAMI,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYX,WAAZ,CAAnB;AAEA,eAAe,UAASY,KAAT,EAAgBC,eAAhB,EAAiC;EAC5CJ,UAAU,CAACK,OAAX,CAAmB,UAAAC,IAAI,EAAI;IACvB,IAAIH,KAAK,CAACI,cAAN,CAAqBD,IAArB,CAAJ,EAAgC;MAC5BF,eAAe,CAACI,IAAhB,CAAqBF,IAArB;IACH;EACJ,CAJD;EAMA,IAAQG,MAAR,GAAmBN,KAAnB,CAAQM,MAAR;EACA,IAAMC,WAAN,GAAuCP,KAAvC,CAAMO,WAAN;EAAA,IAAmBC,eAAnB,GAAuCR,KAAvC,CAAmBQ,eAAnB;;EAEA,IAAI,CAACA,eAAD,IAAoBA,eAAe,KAAK,MAA5C,EAAoD;IAChDA,eAAe,GAAG,IAAlB;EACH,CAFD,MAEO;IAKHA,eAAe,GAAGnB,iBAAiB,CAACmB,eAAD,CAAnC;;IACA,IAAIA,eAAe,IAAIA,eAAe,CAACC,MAAhB,GAAyB,CAAzB,KAA+B,CAAtD,EAAyD;MACrDD,eAAe,GAAGA,eAAe,CAACE,MAAhB,CAAuBF,eAAvB,CAAlB;IACH;EACJ;;EAED,IAAI,CAACD,WAAD,IAAgB,OAAOA,WAAP,KAAuB,QAA3C,EAAqD;IACjDA,WAAW,SAAMA,WAAW,IAAI,CAArB,CAAX;EACH;;EAED,OAAO;IACHD,MAAM,EAAEpB,YAAY,CAACoB,MAAD,CADjB;IAEHK,aAAa,EAAExB,cAAc,CAACa,KAAK,CAACW,aAAP,CAF1B;IAGHC,aAAa,EAAEtB,IAAI,CAACU,KAAK,CAACY,aAAP,CAAJ,IAA6B,CAHzC;IAIHC,cAAc,EAAEnB,KAAK,CAACM,KAAK,CAACa,cAAP,CAAL,IAA+B,CAJ5C;IAKHL,eAAe,EAAEA,eALd;IAMHD,WAAW,EAAEA,WANV;IAOHO,gBAAgB,EAAEN,eAAe,GAAG,CAACR,KAAK,CAACc,gBAAP,IAA2B,CAA9B,GAAkC,IAPhE;IAQHC,gBAAgB,EAAEC,UAAU,CAAChB,KAAK,CAACe,gBAAP,CAAV,IAAsC;EARrD,CAAP;AAUH"},"metadata":{},"sourceType":"module"}