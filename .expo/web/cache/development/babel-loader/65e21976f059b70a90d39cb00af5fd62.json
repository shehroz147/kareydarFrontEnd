{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    SCREEN_WIDTH = _Dimensions$get.width,\n    SCREEN_HEIGHT = _Dimensions$get.height;\n\nvar widthBaseScale = SCREEN_WIDTH / 375;\nvar heightBaseScale = SCREEN_HEIGHT / 812;\n\nfunction normalize(size) {\n  var based = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'width';\n  var newSize = based === 'height' ? size * heightBaseScale : size * widthBaseScale;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize));\n}\n\nvar widthPixel = function widthPixel(size) {\n  return normalize(size, 'width');\n};\n\nvar heightPixel = function heightPixel(size) {\n  return normalize(size, 'height');\n};\n\nvar fontPixel = function fontPixel(size) {\n  return heightPixel(size);\n};\n\nvar pixelSizeVertical = function pixelSizeVertical(size) {\n  return heightPixel(size);\n};\n\nvar pixelSizeHorizontal = function pixelSizeHorizontal(size) {\n  return widthPixel(size);\n};\n\nexport { widthPixel, heightPixel, fontPixel, pixelSizeVertical, pixelSizeHorizontal };","map":{"version":3,"names":["Dimensions","get","SCREEN_WIDTH","width","SCREEN_HEIGHT","height","widthBaseScale","heightBaseScale","normalize","size","based","newSize","Math","round","PixelRatio","roundToNearestPixel","widthPixel","heightPixel","fontPixel","pixelSizeVertical","pixelSizeHorizontal"],"sources":["C:/Users/hahah/Desktop/att/attornea-lawyer/src/lib/style/adjust.js"],"sourcesContent":["import {Dimensions, PixelRatio} from 'react-native';\r\nconst {width: SCREEN_WIDTH, height: SCREEN_HEIGHT} = Dimensions.get('window');\r\n\r\nconst widthBaseScale = SCREEN_WIDTH / 375;\r\nconst heightBaseScale = SCREEN_HEIGHT / 812;\r\n\r\nfunction normalize(size, based = 'width') {\r\n  const newSize =\r\n    based === 'height' ? size * heightBaseScale : size * widthBaseScale;\r\n  return Math.round(PixelRatio.roundToNearestPixel(newSize));\r\n}\r\n\r\n//for width  pixel\r\nconst widthPixel = size => {\r\n  return normalize(size, 'width');\r\n};\r\n//for height  pixel\r\nconst heightPixel = size => {\r\n  return normalize(size, 'height');\r\n};\r\n//for font  pixel\r\nconst fontPixel = size => {\r\n  return heightPixel(size);\r\n};\r\n//for Margin and Padding vertical pixel\r\nconst pixelSizeVertical = size => {\r\n  return heightPixel(size);\r\n};\r\n//for Margin and Padding horizontal pixel\r\nconst pixelSizeHorizontal = size => {\r\n  return widthPixel(size);\r\n};\r\nexport {\r\n  widthPixel,\r\n  heightPixel,\r\n  fontPixel,\r\n  pixelSizeVertical,\r\n  pixelSizeHorizontal,\r\n};\r\n"],"mappings":";;;AACA,sBAAqDA,UAAU,CAACC,GAAX,CAAe,QAAf,CAArD;AAAA,IAAcC,YAAd,mBAAOC,KAAP;AAAA,IAAoCC,aAApC,mBAA4BC,MAA5B;;AAEA,IAAMC,cAAc,GAAGJ,YAAY,GAAG,GAAtC;AACA,IAAMK,eAAe,GAAGH,aAAa,GAAG,GAAxC;;AAEA,SAASI,SAAT,CAAmBC,IAAnB,EAA0C;EAAA,IAAjBC,KAAiB,uEAAT,OAAS;EACxC,IAAMC,OAAO,GACXD,KAAK,KAAK,QAAV,GAAqBD,IAAI,GAAGF,eAA5B,GAA8CE,IAAI,GAAGH,cADvD;EAEA,OAAOM,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BJ,OAA/B,CAAX,CAAP;AACD;;AAGD,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAAAP,IAAI,EAAI;EACzB,OAAOD,SAAS,CAACC,IAAD,EAAO,OAAP,CAAhB;AACD,CAFD;;AAIA,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAAAR,IAAI,EAAI;EAC1B,OAAOD,SAAS,CAACC,IAAD,EAAO,QAAP,CAAhB;AACD,CAFD;;AAIA,IAAMS,SAAS,GAAG,SAAZA,SAAY,CAAAT,IAAI,EAAI;EACxB,OAAOQ,WAAW,CAACR,IAAD,CAAlB;AACD,CAFD;;AAIA,IAAMU,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAV,IAAI,EAAI;EAChC,OAAOQ,WAAW,CAACR,IAAD,CAAlB;AACD,CAFD;;AAIA,IAAMW,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAX,IAAI,EAAI;EAClC,OAAOO,UAAU,CAACP,IAAD,CAAjB;AACD,CAFD;;AAGA,SACEO,UADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,iBAJF,EAKEC,mBALF"},"metadata":{},"sourceType":"module"}