{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { heightPixel, widthPixel } from \"../../lib/style/adjust\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar PixelImage = function PixelImage(_ref) {\n  var imageSource = _ref.imageSource,\n      imageWidth = _ref.imageWidth,\n      secondStyle = _ref.secondStyle;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      imageRatio = _React$useState4[0],\n      setImageRatio = _React$useState4[1];\n\n  React.useEffect(function () {\n    var source = Image.resolveAssetSource(imageSource);\n\n    if (source.width !== null && source.height !== null) {\n      setImageRatio(source.width / source.height);\n      setLoaded(true);\n    }\n  }, [imageSource]);\n\n  if (!loaded) {\n    return _jsx(View, {});\n  }\n\n  return _jsx(Image, {\n    style: [secondStyle, {\n      width: widthPixel(imageWidth),\n      height: heightPixel(imageWidth) / imageRatio,\n      resizeMode: 'contain'\n    }],\n    source: imageSource\n  });\n};\n\nexport default PixelImage;","map":{"version":3,"names":["React","heightPixel","widthPixel","PixelImage","imageSource","imageWidth","secondStyle","useState","loaded","setLoaded","imageRatio","setImageRatio","useEffect","source","Image","resolveAssetSource","width","height","resizeMode"],"sources":["C:/Users/hahah/Desktop/att/attornea-lawyer/src/Components/common/PixelImage.js"],"sourcesContent":["import React from 'react';\r\nimport {Image, View} from 'react-native';\r\nimport {heightPixel, widthPixel} from '../../lib/style/adjust';\r\n\r\nconst PixelImage = ({imageSource, imageWidth, secondStyle}) => {\r\n  const [loaded, setLoaded] = React.useState(false);\r\n  const [imageRatio, setImageRatio] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    let source = Image.resolveAssetSource(imageSource);\r\n    if (source.width !== null && source.height !== null) {\r\n      setImageRatio(source.width / source.height);\r\n      setLoaded(true);\r\n    }\r\n  }, [imageSource]);\r\n\r\n  if (!loaded) {\r\n    return <View />;\r\n  }\r\n\r\n  return (\r\n    <Image\r\n      style={[\r\n        secondStyle,\r\n        {\r\n          width: widthPixel(imageWidth),\r\n          height: heightPixel(imageWidth) / imageRatio,\r\n          resizeMode: 'contain',\r\n        },\r\n      ]}\r\n      source={imageSource}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PixelImage;\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAAQC,WAAR,EAAqBC,UAArB;;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAA4C;EAAA,IAA1CC,WAA0C,QAA1CA,WAA0C;EAAA,IAA7BC,UAA6B,QAA7BA,UAA6B;EAAA,IAAjBC,WAAiB,QAAjBA,WAAiB;;EAC7D,sBAA4BN,KAAK,CAACO,QAAN,CAAe,KAAf,CAA5B;EAAA;EAAA,IAAOC,MAAP;EAAA,IAAeC,SAAf;;EACA,uBAAoCT,KAAK,CAACO,QAAN,CAAe,CAAf,CAApC;EAAA;EAAA,IAAOG,UAAP;EAAA,IAAmBC,aAAnB;;EAEAX,KAAK,CAACY,SAAN,CAAgB,YAAM;IACpB,IAAIC,MAAM,GAAGC,KAAK,CAACC,kBAAN,CAAyBX,WAAzB,CAAb;;IACA,IAAIS,MAAM,CAACG,KAAP,KAAiB,IAAjB,IAAyBH,MAAM,CAACI,MAAP,KAAkB,IAA/C,EAAqD;MACnDN,aAAa,CAACE,MAAM,CAACG,KAAP,GAAeH,MAAM,CAACI,MAAvB,CAAb;MACAR,SAAS,CAAC,IAAD,CAAT;IACD;EACF,CAND,EAMG,CAACL,WAAD,CANH;;EAQA,IAAI,CAACI,MAAL,EAAa;IACX,OAAO,KAAC,IAAD,KAAP;EACD;;EAED,OACE,KAAC,KAAD;IACE,KAAK,EAAE,CACLF,WADK,EAEL;MACEU,KAAK,EAAEd,UAAU,CAACG,UAAD,CADnB;MAEEY,MAAM,EAAEhB,WAAW,CAACI,UAAD,CAAX,GAA0BK,UAFpC;MAGEQ,UAAU,EAAE;IAHd,CAFK,CADT;IASE,MAAM,EAAEd;EATV,EADF;AAaD,CA7BD;;AA+BA,eAAeD,UAAf"},"metadata":{},"sourceType":"module"}